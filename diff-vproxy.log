!!!!! diff /java/module-info.java !!!!!
!!!!! 3d2
!!!!! <     requires vjson;
!!!!! 4a4,5
!!!!! >     requires kotlinx.coroutines.core;
!!!!! >     requires vjson;
!!!!! 5a7,9
!!!!! >     requires transitive io.vproxy.dep;
!!!!! >     requires io.vproxy.pni;
!!!!! > 
!!!!! 6a11,14
!!!!! >     exports io.vproxy.base.component.check;
!!!!! >     exports io.vproxy.base.component.elgroup;
!!!!! >     exports io.vproxy.base.component.elgroup.dummy;
!!!!! >     exports io.vproxy.base.component.svrgroup;
!!!!! 7a16,17
!!!!! >     exports io.vproxy.base.connection.util;
!!!!! >     exports io.vproxy.base.dhcp;
!!!!! 9a20,32
!!!!! >     exports io.vproxy.base.http;
!!!!! >     exports io.vproxy.base.http.connect;
!!!!! >     exports io.vproxy.base.processor;
!!!!! >     exports io.vproxy.base.processor.common;
!!!!! >     exports io.vproxy.base.processor.dubbo;
!!!!! >     exports io.vproxy.base.processor.http;
!!!!! >     exports io.vproxy.base.processor.http1;
!!!!! >     exports io.vproxy.base.processor.http1.builder;
!!!!! >     exports io.vproxy.base.processor.http1.entity;
!!!!! >     exports io.vproxy.base.processor.httpbin;
!!!!! >     exports io.vproxy.base.processor.httpbin.entity;
!!!!! >     exports io.vproxy.base.processor.httpbin.frame;
!!!!! >     exports io.vproxy.base.processor.httpbin.hpack;
!!!!! 10a34,49
!!!!! >     exports io.vproxy.base.protocol;
!!!!! >     exports io.vproxy.base.redis;
!!!!! >     exports io.vproxy.base.redis.application;
!!!!! >     exports io.vproxy.base.redis.entity;
!!!!! >     exports io.vproxy.base.selector;
!!!!! >     exports io.vproxy.base.selector.wrap;
!!!!! >     exports io.vproxy.base.selector.wrap.arqudp;
!!!!! >     exports io.vproxy.base.selector.wrap.blocking;
!!!!! >     exports io.vproxy.base.selector.wrap.file;
!!!!! >     exports io.vproxy.base.selector.wrap.h2streamed;
!!!!! >     exports io.vproxy.base.selector.wrap.kcp;
!!!!! >     exports io.vproxy.base.selector.wrap.kcp.mock;
!!!!! >     exports io.vproxy.base.selector.wrap.quic;
!!!!! >     exports io.vproxy.base.selector.wrap.streamed;
!!!!! >     exports io.vproxy.base.selector.wrap.udp;
!!!!! >     exports io.vproxy.base.socks;
!!!!! 15a55
!!!!! >     exports io.vproxy.base.util.codec;
!!!!! 16a57
!!!!! >     exports io.vproxy.base.util.crypto;
!!!!! 19a61
!!!!! >     exports io.vproxy.base.util.file;
!!!!! 21a64
!!!!! >     exports io.vproxy.base.util.kt;
!!!!! 29a73,74
!!!!! >     exports io.vproxy.base.util.ringbuffer.ssl;
!!!!! >     exports io.vproxy.base.util.thread;
!!!!! 35a81,84
!!!!! >     exports io.vproxy.fubuki;
!!!!! >     exports io.vproxy.msquic.callback;
!!!!! >     exports io.vproxy.msquic.wrap;
!!!!! >     exports io.vproxy.msquic;
!!!!! 36a86,90
!!!!! >     exports io.vproxy.vfd.abs;
!!!!! >     exports io.vproxy.vfd.jdk;
!!!!! >     exports io.vproxy.vfd.posix;
!!!!! >     exports io.vproxy.vfd.windows;
!!!!! >     exports io.vproxy.vmirror;
!!!!! 37a92,94
!!!!! >     exports io.vproxy.vpacket.conntrack;
!!!!! >     exports io.vproxy.vpacket.conntrack.tcp;
!!!!! >     exports io.vproxy.vpacket.conntrack.udp;
!!!!! 42a100,103
!!!!! >     exports io.vproxy.xdp;
!!!!! > 
!!!!! >     uses io.vproxy.vfd.FDs;
!!!!! >     uses io.vproxy.base.processor.ProcessorRegistry;
!!!!! diff return code 1 !!!!!

##### files are the same: /java/io/vproxy/commons/util/IOUtils.java #####
##### files are the same: /java/io/vproxy/commons/util/Singleton.java #####
##### files are the same: /java/io/vproxy/commons/graph/GraphEdge.java #####
##### files are the same: /java/io/vproxy/commons/graph/Graph.java #####
##### files are the same: /java/io/vproxy/commons/graph/GraphPath.java #####
##### files are the same: /java/io/vproxy/commons/graph/GraphBuilder.java #####
##### files are the same: /java/io/vproxy/commons/graph/GraphNode.java #####
##### files are the same: /java/io/vproxy/commons/graph/Dijkstra.java #####
!!!!! diff /java/io/vproxy/vfd/IP.java !!!!!
!!!!! 660a661
!!!!! >     // return -1 if not a valid ip mask
!!!!! 678,701c679,688
!!!!! <                 case (byte) 254:
!!!!! <                     res += 7;
!!!!! <                     break;
!!!!! <                 case (byte) 252:
!!!!! <                     res += 6;
!!!!! <                     break;
!!!!! <                 case (byte) 248:
!!!!! <                     res += 5;
!!!!! <                     break;
!!!!! <                 case (byte) 240:
!!!!! <                     res += 4;
!!!!! <                     break;
!!!!! <                 case (byte) 224:
!!!!! <                     res += 3;
!!!!! <                     break;
!!!!! <                 case (byte) 192:
!!!!! <                     res += 2;
!!!!! <                     break;
!!!!! <                 case (byte) 128:
!!!!! <                     res += 1;
!!!!! <                     break;
!!!!! <                 case 0:
!!!!! <                     break;
!!!!! <                 default:
!!!!! ---
!!!!! >                 case (byte) 254 -> res += 7;
!!!!! >                 case (byte) 252 -> res += 6;
!!!!! >                 case (byte) 248 -> res += 5;
!!!!! >                 case (byte) 240 -> res += 4;
!!!!! >                 case (byte) 224 -> res += 3;
!!!!! >                 case (byte) 192 -> res += 2;
!!!!! >                 case (byte) 128 -> res += 1;
!!!!! >                 case 0 -> {
!!!!! >                 }
!!!!! >                 default -> {
!!!!! 702a690
!!!!! >                 }
!!!!! diff return code 1 !!!!!

##### files are the same: /java/io/vproxy/vfd/WritableByteStream.java #####
##### files are the same: /java/io/vproxy/vfd/IPMask.java #####
!!!!! diff /java/io/vproxy/vfd/IPPort.java !!!!!
!!!!! 7c7
!!!!! < public class IPPort {
!!!!! ---
!!!!! > public class IPPort extends SockAddr {
!!!!! 42a43,45
!!!!! >         if (l4addr instanceof UnixDomainSocketAddress) {
!!!!! >             return ((UnixDomainSocketAddress) l4addr).path;
!!!!! >         }
!!!!! diff return code 1 !!!!!

##### files are the same: /java/io/vproxy/vfd/IPv6.java #####
##### files are the same: /java/io/vproxy/vfd/IPv4.java #####
##### files are the same: /java/io/vproxy/vfd/ReadableByteStream.java #####
##### files are the same: /java/io/vproxy/vfd/MacAddress.java #####
##### files are the same: /java/io/vproxy/vpacket/PacketDataBuffer.java #####
##### files are the same: /java/io/vproxy/vpacket/ArpPacket.java #####
##### files are the same: /java/io/vproxy/vpacket/Ipv6Packet.java #####
##### files are the same: /java/io/vproxy/vpacket/PcapParser.java #####
##### files are the same: /java/io/vproxy/vpacket/AbstractIpPacket.java #####
##### files are the same: /java/io/vproxy/vpacket/IcmpPacket.java #####
##### files are the same: /java/io/vproxy/vpacket/UdpPacket.java #####
##### files are the same: /java/io/vproxy/vpacket/tuples/PacketFullTuple.java #####
##### files are the same: /java/io/vproxy/vpacket/VXLanPacket.java #####
##### files are the same: /java/io/vproxy/vpacket/EthernetPacket.java #####
##### files are the same: /java/io/vproxy/vpacket/Ipv4Packet.java #####
##### files are the same: /java/io/vproxy/vpacket/TcpPacket.java #####
##### files are the same: /java/io/vproxy/vpacket/PcapPacket.java #####
##### files are the same: /java/io/vproxy/vpacket/dhcp/options/PadOption.java #####
##### files are the same: /java/io/vproxy/vpacket/dhcp/options/EndOption.java #####
##### files are the same: /java/io/vproxy/vpacket/dhcp/options/ParameterRequestListOption.java #####
##### files are the same: /java/io/vproxy/vpacket/dhcp/options/MessageTypeOption.java #####
##### files are the same: /java/io/vproxy/vpacket/dhcp/options/DNSOption.java #####
##### files are the same: /java/io/vproxy/vpacket/dhcp/DHCPOption.java #####
##### files are the same: /java/io/vproxy/vpacket/dhcp/DHCPPacket.java #####
##### files are the same: /java/io/vproxy/vpacket/PartialPacket.java #####
##### files are the same: /java/io/vproxy/vpacket/AbstractPacket.java #####
##### files are the same: /java/io/vproxy/vpacket/TransportPacket.java #####
##### files are the same: /java/io/vproxy/vpacket/PcapGlobalHeader.java #####
##### files are the same: /java/io/vproxy/vpacket/dns/DNSRecord.java #####
##### files are the same: /java/io/vproxy/vpacket/dns/DNSResource.java #####
##### files are the same: /java/io/vproxy/vpacket/dns/DNSPacket.java #####
##### files are the same: /java/io/vproxy/vpacket/dns/rdata/TXT.java #####
##### files are the same: /java/io/vproxy/vpacket/dns/rdata/AAAA.java #####
##### files are the same: /java/io/vproxy/vpacket/dns/rdata/CNAME.java #####
##### files are the same: /java/io/vproxy/vpacket/dns/rdata/RData.java #####
##### files are the same: /java/io/vproxy/vpacket/dns/rdata/PTR.java #####
##### files are the same: /java/io/vproxy/vpacket/dns/rdata/SRV.java #####
##### files are the same: /java/io/vproxy/vpacket/dns/rdata/A.java #####
##### files are the same: /java/io/vproxy/vpacket/dns/Formatter.java #####
##### files are the same: /java/io/vproxy/vpacket/dns/DNSClass.java #####
##### files are the same: /java/io/vproxy/vpacket/dns/InvalidDNSPacketException.java #####
##### files are the same: /java/io/vproxy/vpacket/dns/DNSType.java #####
##### files are the same: /java/io/vproxy/vpacket/dns/DNSQuestion.java #####
##### files are the same: /java/io/vproxy/vpacket/PacketBytes.java #####
##### files are the same: /java/io/vproxy/base/connection/Protocol.java #####
##### files are the same: /java/io/vproxy/base/util/ringbuffer/AbstractRingBuffer.java #####
##### files are the same: /java/io/vproxy/base/util/ringbuffer/ByteBufferRingBuffer.java #####
##### files are the same: /java/io/vproxy/base/util/ringbuffer/AbstractUnwrapByteBufferRingBuffer.java #####
##### files are the same: /java/io/vproxy/base/util/ringbuffer/SimpleRingBuffer.java #####
##### files are the same: /java/io/vproxy/base/util/ringbuffer/AbstractUnwrapRingBuffer.java #####
##### files are the same: /java/io/vproxy/base/util/ringbuffer/AbstractWrapRingBuffer.java #####
##### files are the same: /java/io/vproxy/base/util/ringbuffer/ProxyOutputRingBuffer.java #####
##### files are the same: /java/io/vproxy/base/util/ringbuffer/AbstractWrapByteBufferRingBuffer.java #####
##### files are the same: /java/io/vproxy/base/util/misc/IntMatcher.java #####
##### files are the same: /java/io/vproxy/base/util/NetworkV6.java #####
##### files are the same: /java/io/vproxy/base/util/net/PortPool.java #####
##### files are the same: /java/io/vproxy/base/util/net/Nic.java #####
##### files are the same: /java/io/vproxy/base/util/net/IPPortPool.java #####
##### files are the same: /java/io/vproxy/base/util/net/SNatIPPortPool.java #####
##### files are the same: /java/io/vproxy/base/util/ByteBufferEx.java #####
##### files are the same: /java/io/vproxy/base/util/Consts.java #####
##### files are the same: /java/io/vproxy/base/util/direct/DirectMemoryUtils.java #####
!!!!! diff /java/io/vproxy/base/util/direct/DirectByteBuffer.java !!!!!
!!!!! 5a6
!!!!! > import java.lang.foreign.MemorySegment;
!!!!! 9a11
!!!!! >     protected final MemorySegment seg;
!!!!! 12a15
!!!!! >         this.seg = MemorySegment.ofBuffer(buffer);
!!!!! 22a26,29
!!!!! >     public MemorySegment getMemorySegment() {
!!!!! >         return seg;
!!!!! >     }
!!!!! > 
!!!!! 35c42
!!!!! <     @SuppressWarnings("deprecation")
!!!!! ---
!!!!! >     @SuppressWarnings({"removal"})
!!!!! diff return code 1 !!!!!

##### files are the same: /java/io/vproxy/base/util/objectpool/CursorList.java #####
##### files are the same: /java/io/vproxy/base/util/objectpool/ConcurrentObjectPool.java #####
##### files are the same: /java/io/vproxy/base/util/objectpool/PrototypeObjectList.java #####
##### files are the same: /java/io/vproxy/base/util/objectpool/GarbageFree.java #####
!!!!! diff /java/io/vproxy/base/util/file/MappedByteBufferLogger.java !!!!!
!!!!! 35c35
!!!!! <             throw new IOException(location + " is not a directory");
!!!!! ---
!!!!! >             throw new IOException(STR."\{location} is not a directory");
!!!!! 119c119
!!!!! <             Logger.error(LogType.FILE_ERROR, "failed creating new file for " + prefix + "..." + suffix);
!!!!! ---
!!!!! >             Logger.error(LogType.FILE_ERROR, STR."failed creating new file for \{prefix}...\{suffix}");
!!!!! 201,217c201,204
!!!!! <     public static final class WriteOrDropResult {
!!!!! <         private final WriteOrDropResultType type;
!!!!! <         private final Promise<Void> writablePromise;
!!!!! < 
!!!!! <         public WriteOrDropResult(WriteOrDropResultType type,
!!!!! <                                  Promise<Void> writablePromise) {
!!!!! <             this.type = type;
!!!!! <             this.writablePromise = writablePromise;
!!!!! <         }
!!!!! < 
!!!!! <         public WriteOrDropResultType type() {
!!!!! <             return type;
!!!!! <         }
!!!!! < 
!!!!! <         public Promise<Void> writablePromise() {
!!!!! <             return writablePromise;
!!!!! <         }
!!!!! ---
!!!!! >     public record WriteOrDropResult(
!!!!! >         WriteOrDropResultType type,
!!!!! >         Promise<Void> writablePromise
!!!!! >     ) {
!!!!! diff return code 1 !!!!!

##### files are the same: /java/io/vproxy/base/util/web/HttpStatusCodeReasonMap.java #####
##### files are the same: /java/io/vproxy/base/util/web/ErrorPages.java #####
##### files are the same: /java/io/vproxy/base/util/web/ClasspathResourceHolder.java #####
##### files are the same: /java/io/vproxy/base/util/Network.java #####
!!!!! diff /java/io/vproxy/base/util/Logger.java !!!!!
!!!!! 6a7,8
!!!!! > import io.vproxy.base.util.thread.VProxyThread;
!!!!! > import io.vproxy.vfd.*;
!!!!! 7a10,11
!!!!! > import java.io.IOException;
!!!!! > import java.nio.ByteBuffer;
!!!!! 17a22
!!!!! >     private static DatagramFD logChannel;
!!!!! 110c115
!!!!! <         return System.currentTimeMillis();
!!!!! ---
!!!!! >         return FDProvider.get().currentTimeMillis();
!!!!! 123c128
!!!!! <             String debugInfo = null;
!!!!! ---
!!!!! >             String debugInfo = VProxyThread.current().debugInfo;
!!!!! 215a221,265
!!!!! >     }
!!!!! > 
!!!!! >     public static void probe(String msg) {
!!!!! >         String threadName = Thread.currentThread().getName();
!!!!! >         var record = new LogRecord(threadName, null,
!!!!! >             LogLevel.PROBE,
!!!!! >             LogType.PROBE,
!!!!! >             currentTimeMillis(),
!!!!! >             msg,
!!!!! >             null);
!!!!! >         String log = record.toStringNoColor(stackTraceOn);
!!!!! >         DatagramFD chnl = getLogChannel();
!!!!! >         try {
!!!!! >             chnl.send(ByteBuffer.wrap(log.getBytes()), getLogAddress());
!!!!! >         } catch (IOException e) {
!!!!! >             Logger.shouldNotHappen("sending log message failed", e);
!!!!! >         }
!!!!! >     }
!!!!! > 
!!!!! >     private static DatagramFD getLogChannel() {
!!!!! >         if (logChannel == null) {
!!!!! >             try {
!!!!! >                 logChannel = FDProvider.get().openDatagramFD();
!!!!! >                 logChannel.configureBlocking(false);
!!!!! >             } catch (IOException e) {
!!!!! >                 shouldNotHappen("open datagram channel as log channel failed", e);
!!!!! >                 if (logChannel != null) {
!!!!! >                     try {
!!!!! >                         logChannel.close();
!!!!! >                     } catch (IOException ignore) {
!!!!! >                     }
!!!!! >                 }
!!!!! >                 logChannel = null;
!!!!! >                 throw new RuntimeException(e);
!!!!! >             }
!!!!! >         }
!!!!! >         if (!logChannel.isOpen()) {
!!!!! >             try {
!!!!! >                 logChannel.close();
!!!!! >             } catch (IOException ignore) {
!!!!! >             }
!!!!! >             logChannel = null;
!!!!! >             return getLogChannel();
!!!!! >         }
!!!!! >         return logChannel;
!!!!! 217a268,271
!!!!! >     private static IPPort getLogAddress() {
!!!!! >         return new IPPort(IP.from(new byte[]{127, 0, 0, 1}), 23456);
!!!!! >     }
!!!!! >
!!!!! diff return code 1 !!!!!

##### files are the same: /java/io/vproxy/base/util/IPType.java #####
##### files are the same: /java/io/vproxy/base/util/io/ArrayInputStream.java #####
##### files are the same: /java/io/vproxy/base/util/io/ArrayOutputStream.java #####
!!!!! diff /java/io/vproxy/base/util/Utils.java !!!!!
!!!!! 8a9
!!!!! > import io.vproxy.base.util.thread.VProxyThread;
!!!!! 9a11
!!!!! > import io.vproxy.vfd.FDProvider;
!!!!! 234c236
!!!!! <             (System.currentTimeMillis() / 60_000 // remove millis and seconds
!!!!! ---
!!!!! >             (FDProvider.get().currentTimeMillis() / 60_000 // remove millis and seconds
!!!!! 636c638
!!!!! <         new Thread(() -> {
!!!!! ---
!!!!! >         VProxyThread.create(() -> {
!!!!! 662c664
!!!!! <         new Thread(() -> {
!!!!! ---
!!!!! >         VProxyThread.create(() -> {
!!!!! diff return code 1 !!!!!

##### files are the same: /java/io/vproxy/base/util/ToByteArray.java #####
##### files are the same: /java/io/vproxy/base/util/bytearray/UnmodifiableByteArray.java #####
##### files are the same: /java/io/vproxy/base/util/bytearray/PersistByteArray.java #####
##### files are the same: /java/io/vproxy/base/util/bytearray/SubByteArray.java #####
!!!!! diff /java/io/vproxy/base/util/bytearray/MemorySegmentByteArray.java !!!!!
!!!!! 5,7c5,6
!!!!! < import java.lang.invoke.MethodHandle;
!!!!! < import java.lang.invoke.MethodHandles;
!!!!! < import java.lang.invoke.MethodType;
!!!!! ---
!!!!! > import java.lang.foreign.MemorySegment;
!!!!! > import java.lang.foreign.ValueLayout;
!!!!! 12,25c11
!!!!! <     private static final Class<?> MemorySegment;
!!!!! <     private static final Object JAVA_BYTE;
!!!!! <     private static final MethodHandle getByte;
!!!!! <     private static final MethodHandle setByte;
!!!!! <     private static final MethodHandle byteSize;
!!!!! <     private static final MethodHandle asByteBuffer;
!!!!! <     private static final MethodHandle asSlice;
!!!!! <     private static final MethodHandle copyFrom;
!!!!! <     private static final MethodHandle getLong;
!!!!! <     private static final MethodHandle getInt;
!!!!! <     private static final MethodHandle getShort;
!!!!! <     private static final MethodHandle setLong;
!!!!! <     private static final MethodHandle setInt;
!!!!! <     private static final MethodHandle setShort;
!!!!! ---
!!!!! >     protected final MemorySegment seg;
!!!!! 27,97c13
!!!!! <     static {
!!!!! <         try {
!!!!! <             var lookup = MethodHandles.lookup();
!!!!! < 
!!!!! <             var CLASSNAME = "java.lang.foreign.MemorySegment";
!!!!! <             MemorySegment = Class.forName(CLASSNAME);
!!!!! <             var ValueLayout = Class.forName("java.lang.foreign.ValueLayout");
!!!!! < 
!!!!! <             JAVA_BYTE = ValueLayout.getField("JAVA_BYTE").get(null);
!!!!! <             {
!!!!! <                 var ValueLayout$OfLong = Class.forName("java.lang.foreign.ValueLayout$OfLong");
!!!!! < 
!!!!! <                 var _LONG_BIG_ENDIAN = ValueLayout.getField("JAVA_LONG_UNALIGNED").get(null);
!!!!! <                 _LONG_BIG_ENDIAN = ValueLayout$OfLong.getMethod("withOrder", ByteOrder.class).invoke(_LONG_BIG_ENDIAN, ByteOrder.BIG_ENDIAN);
!!!!! <                 LONG_BIG_ENDIAN = _LONG_BIG_ENDIAN;
!!!!! < 
!!!!! <                 var _LONG_LITTLE_ENDIAN = ValueLayout.getField("JAVA_LONG_UNALIGNED").get(null);
!!!!! <                 _LONG_LITTLE_ENDIAN = ValueLayout$OfLong.getMethod("withOrder", ByteOrder.class).invoke(_LONG_BIG_ENDIAN, ByteOrder.LITTLE_ENDIAN);
!!!!! <                 LONG_LITTLE_ENDIAN = _LONG_LITTLE_ENDIAN;
!!!!! < 
!!!!! <                 getLong = lookup.findVirtual(MemorySegment, "get", MethodType.methodType(long.class, ValueLayout$OfLong, long.class));
!!!!! <                 setLong = lookup.findVirtual(MemorySegment, "set", MethodType.methodType(void.class, ValueLayout$OfLong, long.class, long.class));
!!!!! <             }
!!!!! <             {
!!!!! <                 var ValueLayout$OfInt = Class.forName("java.lang.foreign.ValueLayout$OfInt");
!!!!! < 
!!!!! <                 var _INT_BIG_ENDIAN = ValueLayout.getField("JAVA_INT_UNALIGNED").get(null);
!!!!! <                 _INT_BIG_ENDIAN = ValueLayout$OfInt.getMethod("withOrder", ByteOrder.class).invoke(_INT_BIG_ENDIAN, ByteOrder.BIG_ENDIAN);
!!!!! <                 INT_BIG_ENDIAN = _INT_BIG_ENDIAN;
!!!!! < 
!!!!! <                 var _INT_LITTLE_ENDIAN = ValueLayout.getField("JAVA_INT_UNALIGNED").get(null);
!!!!! <                 _INT_LITTLE_ENDIAN = ValueLayout$OfInt.getMethod("withOrder", ByteOrder.class).invoke(_INT_LITTLE_ENDIAN, ByteOrder.LITTLE_ENDIAN);
!!!!! <                 INT_LITTLE_ENDIAN = _INT_LITTLE_ENDIAN;
!!!!! < 
!!!!! <                 getInt = lookup.findVirtual(MemorySegment, "get", MethodType.methodType(int.class, ValueLayout$OfInt, long.class));
!!!!! <                 setInt = lookup.findVirtual(MemorySegment, "set", MethodType.methodType(void.class, ValueLayout$OfInt, long.class, int.class));
!!!!! <             }
!!!!! <             {
!!!!! <                 var ValueLayout$OfShort = Class.forName("java.lang.foreign.ValueLayout$OfShort");
!!!!! < 
!!!!! <                 var _SHORT_BIG_ENDIAN = ValueLayout.getField("JAVA_SHORT_UNALIGNED").get(null);
!!!!! <                 _SHORT_BIG_ENDIAN = ValueLayout$OfShort.getMethod("withOrder", ByteOrder.class).invoke(_SHORT_BIG_ENDIAN, ByteOrder.BIG_ENDIAN);
!!!!! <                 SHORT_BIG_ENDIAN = _SHORT_BIG_ENDIAN;
!!!!! < 
!!!!! <                 var _SHORT_LITTLE_ENDIAN = ValueLayout.getField("JAVA_SHORT_UNALIGNED").get(null);
!!!!! <                 _SHORT_LITTLE_ENDIAN = ValueLayout$OfShort.getMethod("withOrder", ByteOrder.class).invoke(_SHORT_LITTLE_ENDIAN, ByteOrder.LITTLE_ENDIAN);
!!!!! <                 SHORT_LITTLE_ENDIAN = _SHORT_LITTLE_ENDIAN;
!!!!! < 
!!!!! <                 getShort = lookup.findVirtual(MemorySegment, "get", MethodType.methodType(short.class, ValueLayout$OfShort, long.class));
!!!!! <                 setShort = lookup.findVirtual(MemorySegment, "set", MethodType.methodType(void.class, ValueLayout$OfShort, long.class, short.class));
!!!!! <             }
!!!!! < 
!!!!! <             var ValueLayout$OfByte = Class.forName("java.lang.foreign.ValueLayout$OfByte");
!!!!! < 
!!!!! <             getByte = lookup.findVirtual(MemorySegment, "get", MethodType.methodType(byte.class, ValueLayout$OfByte, long.class));
!!!!! <             setByte = lookup.findVirtual(MemorySegment, "set", MethodType.methodType(void.class, ValueLayout$OfByte, long.class, byte.class));
!!!!! <             byteSize = lookup.findVirtual(MemorySegment, "byteSize", MethodType.methodType(long.class));
!!!!! <             asByteBuffer = lookup.findVirtual(MemorySegment, "asByteBuffer", MethodType.methodType(ByteBuffer.class));
!!!!! <             asSlice = lookup.findVirtual(MemorySegment, "asSlice", MethodType.methodType(MemorySegment, long.class, long.class));
!!!!! <             copyFrom = lookup.findVirtual(MemorySegment, "copyFrom", MethodType.methodType(MemorySegment, MemorySegment));
!!!!! <         } catch (Throwable t) {
!!!!! <             throw new RuntimeException(t);
!!!!! <         }
!!!!! <     }
!!!!! < 
!!!!! <     protected final Object seg;
!!!!! < 
!!!!! <     public MemorySegmentByteArray(Object seg) {
!!!!! <         if (!MemorySegment.isInstance(seg)) {
!!!!! <             throw new IllegalArgumentException(seg.getClass().getName() + " is not MemorySegment");
!!!!! <         }
!!!!! ---
!!!!! >     public MemorySegmentByteArray(MemorySegment seg) {
!!!!! 103,107c19
!!!!! <         try {
!!!!! <             return (byte) getByte.invoke(seg, JAVA_BYTE, idx);
!!!!! <         } catch (Throwable e) {
!!!!! <             throw new UnsupportedOperationException(e);
!!!!! <         }
!!!!! ---
!!!!! >         return seg.get(ValueLayout.JAVA_BYTE, idx);
!!!!! 112,116c24
!!!!! <         try {
!!!!! <             setByte.invoke(seg, JAVA_BYTE, idx, value);
!!!!! <         } catch (Throwable e) {
!!!!! <             throw new UnsupportedOperationException(e);
!!!!! <         }
!!!!! ---
!!!!! >         seg.set(ValueLayout.JAVA_BYTE, idx, value);
!!!!! 122,126c30
!!!!! <         try {
!!!!! <             return (int) ((long) byteSize.invoke(seg));
!!!!! <         } catch (Throwable e) {
!!!!! <             throw new UnsupportedOperationException(e);
!!!!! <         }
!!!!! ---
!!!!! >         return (int) seg.byteSize();
!!!!! 131,135c35
!!!!! <         try {
!!!!! <             dst.put(((ByteBuffer) asByteBuffer.invoke(seg)).limit(off + len).position(off));
!!!!! <         } catch (Throwable e) {
!!!!! <             throw new UnsupportedOperationException(e);
!!!!! <         }
!!!!! ---
!!!!! >         dst.put(seg.asByteBuffer().limit(off + len).position(off));
!!!!! 140,144c40
!!!!! <         try {
!!!!! <             ((ByteBuffer) asByteBuffer.invoke(seg)).limit(off + len).position(off).put(src);
!!!!! <         } catch (Throwable e) {
!!!!! <             throw new UnsupportedOperationException(e);
!!!!! <         }
!!!!! ---
!!!!! >         seg.asByteBuffer().limit(off + len).position(off).put(src);
!!!!! 149c45
!!!!! <         if (!(dst instanceof MemorySegmentByteArray)) {
!!!!! ---
!!!!! >         if (!(dst instanceof MemorySegmentByteArray segBuf)) {
!!!!! 153,170c49
!!!!! <         var segBuf = (MemorySegmentByteArray) dst;
!!!!! <         Object segBufSegSlice;
!!!!! <         try {
!!!!! <             segBufSegSlice = asSlice.invoke(segBuf.seg, dstOff, srcLen);
!!!!! <         } catch (Throwable e) {
!!!!! <             throw new UnsupportedOperationException(e);
!!!!! <         }
!!!!! <         Object thisSegSlice;
!!!!! <         try {
!!!!! <             thisSegSlice = asSlice.invoke(this.seg, srcOff, srcLen);
!!!!! <         } catch (Throwable e) {
!!!!! <             throw new UnsupportedOperationException(e);
!!!!! <         }
!!!!! <         try {
!!!!! <             copyFrom.invoke(segBufSegSlice, thisSegSlice);
!!!!! <         } catch (Throwable e) {
!!!!! <             throw new UnsupportedOperationException(e);
!!!!! <         }
!!!!! ---
!!!!! >         segBuf.seg.asSlice(dstOff, srcLen).copyFrom(this.seg.asSlice(srcOff, srcLen));
!!!!! 175,181c54
!!!!! <         ByteBuffer buf;
!!!!! <         try {
!!!!! <             buf = (ByteBuffer) asByteBuffer.invoke(seg);
!!!!! <         } catch (Throwable e) {
!!!!! <             throw new UnsupportedOperationException(e);
!!!!! <         }
!!!!! <         buf.limit(srcOff + srcLen).position(srcOff).get(dst, dstOff, srcLen);
!!!!! ---
!!!!! >         seg.asByteBuffer().limit(srcOff + srcLen).position(srcOff).get(dst, dstOff, srcLen);
!!!!! 184,185c57,58
!!!!! <     private static final Object LONG_BIG_ENDIAN;
!!!!! <     private static final Object LONG_LITTLE_ENDIAN;
!!!!! ---
!!!!! >     private static final ValueLayout.OfLong LONG_BIG_ENDIAN = ValueLayout.JAVA_LONG_UNALIGNED.withOrder(ByteOrder.BIG_ENDIAN);
!!!!! >     private static final ValueLayout.OfLong LONG_LITTLE_ENDIAN = ValueLayout.JAVA_LONG_UNALIGNED.withOrder(ByteOrder.LITTLE_ENDIAN);
!!!!! 189,193c62
!!!!! <         try {
!!!!! <             return (long) getLong.invoke(seg, LONG_BIG_ENDIAN, offset);
!!!!! <         } catch (Throwable e) {
!!!!! <             throw new UnsupportedOperationException(e);
!!!!! <         }
!!!!! ---
!!!!! >         return seg.get(LONG_BIG_ENDIAN, offset);
!!!!! 198,202c67
!!!!! <         try {
!!!!! <             return (long) getLong.invoke(seg, LONG_LITTLE_ENDIAN, offset);
!!!!! <         } catch (Throwable e) {
!!!!! <             throw new UnsupportedOperationException(e);
!!!!! <         }
!!!!! ---
!!!!! >         return seg.get(LONG_LITTLE_ENDIAN, offset);
!!!!! 205,206c70,71
!!!!! <     private static final Object INT_BIG_ENDIAN;
!!!!! <     private static final Object INT_LITTLE_ENDIAN;
!!!!! ---
!!!!! >     private static final ValueLayout.OfInt INT_BIG_ENDIAN = ValueLayout.JAVA_INT_UNALIGNED.withOrder(ByteOrder.BIG_ENDIAN);
!!!!! >     private static final ValueLayout.OfInt INT_LITTLE_ENDIAN = ValueLayout.JAVA_INT_UNALIGNED.withOrder(ByteOrder.LITTLE_ENDIAN);
!!!!! 210,214c75
!!!!! <         try {
!!!!! <             return (int) getInt.invoke(seg, INT_BIG_ENDIAN, offset);
!!!!! <         } catch (Throwable e) {
!!!!! <             throw new UnsupportedOperationException(e);
!!!!! <         }
!!!!! ---
!!!!! >         return seg.get(INT_BIG_ENDIAN, offset);
!!!!! 219,223c80
!!!!! <         try {
!!!!! <             return (int) getInt.invoke(seg, INT_LITTLE_ENDIAN, offset);
!!!!! <         } catch (Throwable e) {
!!!!! <             throw new UnsupportedOperationException(e);
!!!!! <         }
!!!!! ---
!!!!! >         return seg.get(INT_LITTLE_ENDIAN, offset);
!!!!! 236,237c93,94
!!!!! <     private static final Object SHORT_BIG_ENDIAN;
!!!!! <     private static final Object SHORT_LITTLE_ENDIAN;
!!!!! ---
!!!!! >     private static final ValueLayout.OfShort SHORT_BIG_ENDIAN = ValueLayout.JAVA_SHORT_UNALIGNED.withOrder(ByteOrder.BIG_ENDIAN);
!!!!! >     private static final ValueLayout.OfShort SHORT_LITTLE_ENDIAN = ValueLayout.JAVA_SHORT_UNALIGNED.withOrder(ByteOrder.LITTLE_ENDIAN);
!!!!! 241,245c98
!!!!! <         try {
!!!!! <             return ((short) getShort.invoke(seg, SHORT_BIG_ENDIAN, offset)) & 0xffff;
!!!!! <         } catch (Throwable e) {
!!!!! <             throw new UnsupportedOperationException(e);
!!!!! <         }
!!!!! ---
!!!!! >         return seg.get(SHORT_BIG_ENDIAN, offset) & 0xffff;
!!!!! 250,254c103
!!!!! <         try {
!!!!! <             return ((short) getShort.invoke(seg, SHORT_LITTLE_ENDIAN, offset)) & 0xffff;
!!!!! <         } catch (Throwable e) {
!!!!! <             throw new UnsupportedOperationException(e);
!!!!! <         }
!!!!! ---
!!!!! >         return seg.get(SHORT_LITTLE_ENDIAN, offset) & 0xffff;
!!!!! 259,263c108
!!!!! <         try {
!!!!! <             setShort.invoke(seg, SHORT_BIG_ENDIAN, offset, (short) val);
!!!!! <         } catch (Throwable e) {
!!!!! <             throw new UnsupportedOperationException(e);
!!!!! <         }
!!!!! ---
!!!!! >         seg.set(SHORT_BIG_ENDIAN, offset, (short) val);
!!!!! 269,273c114
!!!!! <         try {
!!!!! <             setInt.invoke(seg, INT_BIG_ENDIAN, offset, val);
!!!!! <         } catch (Throwable e) {
!!!!! <             throw new UnsupportedOperationException(e);
!!!!! <         }
!!!!! ---
!!!!! >         seg.set(INT_BIG_ENDIAN, offset, val);
!!!!! 279,283c120
!!!!! <         try {
!!!!! <             setLong.invoke(seg, LONG_BIG_ENDIAN, offset, val);
!!!!! <         } catch (Throwable e) {
!!!!! <             throw new UnsupportedOperationException(e);
!!!!! <         }
!!!!! ---
!!!!! >         seg.set(LONG_BIG_ENDIAN, offset, val);
!!!!! diff return code 1 !!!!!

##### files are the same: /java/io/vproxy/base/util/bytearray/AbstractByteArray.java #####
##### files are the same: /java/io/vproxy/base/util/bytearray/SimpleByteArray.java #####
##### files are the same: /java/io/vproxy/base/util/bytearray/CompositeByteArray.java #####
##### files are the same: /java/io/vproxy/base/util/bytearray/OneByteArray.java #####
##### files are the same: /java/io/vproxy/base/util/bytearray/RandomAccessFileByteArray.java #####
##### files are the same: /java/io/vproxy/base/util/bytearray/ByteArrayBuilder.java #####
##### files are the same: /java/io/vproxy/base/util/time/impl/TimeElemImpl.java #####
##### files are the same: /java/io/vproxy/base/util/time/impl/TimeQueueImpl.java #####
##### files are the same: /java/io/vproxy/base/util/time/TimeElem.java #####
##### files are the same: /java/io/vproxy/base/util/time/TimeQueue.java #####
!!!!! diff /java/io/vproxy/base/util/ratelimit/StatisticsRateLimiter.java !!!!!
!!!!! 2a3
!!!!! > import io.vproxy.base.Config;
!!!!! 22c23
!!!!! <         lastTs = formatTs(System.currentTimeMillis());
!!!!! ---
!!!!! >         lastTs = formatTs(Config.currentTimestamp);
!!!!! 90c91
!!!!! <         long current = System.currentTimeMillis();
!!!!! ---
!!!!! >         long current = Config.currentTimestamp;
!!!!! diff return code 1 !!!!!

##### files are the same: /java/io/vproxy/base/util/ratelimit/RateLimiter.java #####
!!!!! diff /java/io/vproxy/base/util/ratelimit/SimpleRateLimiter.java !!!!!
!!!!! 2a3,4
!!!!! > import io.vproxy.base.Config;
!!!!! > 
!!!!! 14c16
!!!!! <         this.lastTs = System.currentTimeMillis();
!!!!! ---
!!!!! >         this.lastTs = Config.currentTimestamp;
!!!!! 23c25
!!!!! <         long currentTs = System.currentTimeMillis();
!!!!! ---
!!!!! >         long currentTs = Config.currentTimestamp;
!!!!! diff return code 1 !!!!!

##### files are the same: /java/io/vproxy/base/util/coll/Tree.java #####
##### files are the same: /java/io/vproxy/base/util/coll/AppendableMap.java #####
##### files are the same: /java/io/vproxy/base/util/coll/AppendingList.java #####
##### files are the same: /java/io/vproxy/base/util/coll/Tuple.java #####
##### files are the same: /java/io/vproxy/base/util/coll/IntRanges.java #####
##### files are the same: /java/io/vproxy/base/util/coll/ReusableListIterator.java #####
##### files are the same: /java/io/vproxy/base/util/coll/ConcurrentHashSet.java #####
##### files are the same: /java/io/vproxy/base/util/coll/CopyOnWriteHolder.java #####
##### files are the same: /java/io/vproxy/base/util/coll/Tuple4.java #####
##### files are the same: /java/io/vproxy/base/util/coll/WeakHashSet.java #####
##### files are the same: /java/io/vproxy/base/util/coll/IntMap.java #####
##### files are the same: /java/io/vproxy/base/util/coll/RingQueue.java #####
##### files are the same: /java/io/vproxy/base/util/coll/LRUMap.java #####
##### files are the same: /java/io/vproxy/base/util/coll/Tuple3.java #####
!!!!! diff /java/io/vproxy/base/util/coll/ReItrLinkedList.java !!!!!
!!!!! 1118c1118
!!!!! <     // @Override jdk21
!!!!! ---
!!!!! >     @Override
!!!!! diff return code 1 !!!!!

##### files are the same: /java/io/vproxy/base/util/coll/ReusableIterator.java #####
##### files are the same: /java/io/vproxy/base/util/LogType.java #####
##### files are the same: /java/io/vproxy/base/util/Networks.java #####
##### files are the same: /java/io/vproxy/base/util/RingBufferETHandler.java #####
##### files are the same: /java/io/vproxy/base/util/unsafe/JDKUnsafeFallback.java #####
##### files are the same: /java/io/vproxy/base/util/unsafe/JDKUnsafe.java #####
##### files are the same: /java/io/vproxy/base/util/unsafe/JDKUnsafeImpl.java #####
!!!!! diff /java/io/vproxy/base/util/unsafe/SunUnsafe.java !!!!!
!!!!! 5a6
!!!!! > import java.lang.foreign.MemorySegment;
!!!!! 27,28c28,29
!!!!! <     public static long allocateMemory(long size) {
!!!!! <         return U.allocateMemory(size);
!!!!! ---
!!!!! >     public static MemorySegment allocateMemory(long size) {
!!!!! >         return MemorySegment.ofAddress(U.allocateMemory(size)).reinterpret(size);
!!!!! diff return code 1 !!!!!

##### files are the same: /java/io/vproxy/base/util/MainUtils.java #####
##### files are the same: /java/io/vproxy/base/util/RingBuffer.java #####
##### files are the same: /java/io/vproxy/base/util/nio/ByteArrayChannel.java #####
##### files are the same: /java/io/vproxy/base/util/log/LogRecord.java #####
##### files are the same: /java/io/vproxy/base/util/log/LogHandler.java #####
##### files are the same: /java/io/vproxy/base/util/log/LogLevel.java #####
##### files are the same: /java/io/vproxy/base/util/log/LogDispatcher.java #####
##### files are the same: /java/io/vproxy/base/util/log/ProbeType.java #####
##### files are the same: /java/io/vproxy/base/util/log/STDOutLogHandler.java #####
##### files are the same: /java/io/vproxy/base/util/promise/Promise.java #####
##### files are the same: /java/io/vproxy/base/util/promise/ThrowableFunction.java #####
##### files are the same: /java/io/vproxy/base/util/promise/ThrowableConsumer.java #####
##### files are the same: /java/io/vproxy/base/util/NetworkV4.java #####
##### files are the same: /java/io/vproxy/base/util/display/TableBuilder.java #####
##### files are the same: /java/io/vproxy/base/util/display/TreeBuilder.java #####
##### files are the same: /java/io/vproxy/base/util/display/TR.java #####
##### files are the same: /java/io/vproxy/base/util/callback/BlockCallback.java #####
##### files are the same: /java/io/vproxy/base/util/callback/Callback.java #####
##### files are the same: /java/io/vproxy/base/util/callback/JoinCallback.java #####
##### files are the same: /java/io/vproxy/base/util/OS.java #####
!!!!! diff /java/io/vproxy/base/util/ByteArray.java !!!!!
!!!!! 6a7
!!!!! > import java.lang.foreign.MemorySegment;
!!!!! 59a61,64
!!!!! >     static ByteArray from(MemorySegment seg) {
!!!!! >         return new MemorySegmentByteArray(seg);
!!!!! >     }
!!!!! >
!!!!! diff return code 1 !!!!!

##### files are the same: /java/io/vproxy/base/util/bitwise/BitwiseGeneralMatcher.java #####
##### files are the same: /java/io/vproxy/base/util/bitwise/BitwiseIntMatcher.java #####
##### files are the same: /java/io/vproxy/base/util/bitwise/BitwiseNetworkMatcher.java #####
##### files are the same: /java/io/vproxy/base/util/bitwise/BitwiseIPv6Matcher.java #####
##### files are the same: /java/io/vproxy/base/util/bitwise/BitwiseMatcher.java #####
##### files are the same: /java/io/vproxy/base/util/bitwise/BitwiseIPv4Matcher.java #####
##### files are the same: /java/io/vproxy/base/util/bitwise/BitwiseMacAddressMatcher.java #####
##### files are the same: /java/io/vproxy/base/util/Lock.java #####
##### files are the same: /java/io/vproxy/base/util/exception/NoException.java #####
##### files are the same: /java/io/vproxy/base/util/exception/ConflictException.java #####
##### files are the same: /java/io/vproxy/base/util/exception/StillRunningException.java #####
##### files are the same: /java/io/vproxy/base/util/exception/AlreadyExistException.java #####
##### files are the same: /java/io/vproxy/base/util/exception/NotFoundException.java #####
##### files are the same: /java/io/vproxy/base/util/exception/XException.java #####
##### files are the same: /java/io/vproxy/base/util/exception/ClosedException.java #####
##### files are the same: /java/io/vproxy/base/util/Version.java #####
##### files are the same: /java/io/vproxy/base/util/functional/BooleanSupplierEx.java #####
##### files are the same: /java/io/vproxy/base/util/functional/ConsumerEx.java #####
##### files are the same: /java/io/vproxy/base/util/functional/FunctionEx.java #####
##### files are the same: /java/io/vproxy/base/util/anno/ThreadSafe.java #####
##### files are the same: /java/io/vproxy/base/util/anno/Comment.java #####
##### files are the same: /java/io/vproxy/base/util/anno/Blocking.java #####
##### files are the same: /java/io/vproxy/base/util/anno/Nullable.java #####
!!!!! diff /java/io/vproxy/base/GlobalInspection.java !!!!!
!!!!! 6a7,9
!!!!! > import io.vproxy.base.selector.SelectorEventLoop;
!!!!! > import io.vproxy.base.selector.wrap.FDInspection;
!!!!! > import io.vproxy.base.selector.wrap.VirtualFD;
!!!!! 8a12,13
!!!!! > import io.vproxy.base.util.callback.Callback;
!!!!! > import io.vproxy.base.util.callback.RunOnLoopCallback;
!!!!! 9a15,26
!!!!! > import io.vproxy.base.util.coll.ConcurrentHashSet;
!!!!! > import io.vproxy.base.util.display.TR;
!!!!! > import io.vproxy.base.util.display.TableBuilder;
!!!!! > import io.vproxy.base.util.display.TreeBuilder;
!!!!! > import io.vproxy.base.util.exception.NoException;
!!!!! > import io.vproxy.base.util.thread.VProxyThread;
!!!!! > import vjson.simple.SimpleString;
!!!!! > import io.vproxy.vfd.FD;
!!!!! > import io.vproxy.vfd.NetworkFD;
!!!!! > import io.vproxy.vfd.ServerSocketFD;
!!!!! > import io.vproxy.vfd.SockAddr;
!!!!! > import io.vproxy.vfd.posix.PosixFD;
!!!!! 11,13c28
!!!!! < import java.util.Collections;
!!!!! < import java.util.HashMap;
!!!!! < import java.util.Map;
!!!!! ---
!!!!! > import java.util.*;
!!!!! 14a30
!!!!! > import java.util.function.Consumer;
!!!!! 29a46,48
!!!!! >     private final Counter sslUnwrapTaskCount;
!!!!! >     private final Counter sslUnwrapTaskTimeMillisTotal;
!!!!! >     private final Gauge threadNumberCurrent;
!!!!! 30a50,52
!!!!! >     private final ConcurrentHashSet<SelectorEventLoop> runningLoops = new ConcurrentHashSet<>();
!!!!! >     private final ConcurrentHashSet<VProxyThread> runningThreads = new ConcurrentHashSet<>();
!!!!! > 
!!!!! 58a81,92
!!!!! >         sslUnwrapTaskCount = new Counter("ssl_unwrap_task_count", new AppendableMap<>()
!!!!! >             .appendAll(extraLabels));
!!!!! >         metrics.add(sslUnwrapTaskCount);
!!!!! > 
!!!!! >         sslUnwrapTaskTimeMillisTotal = new Counter("ssl_unwrap_task_time_millis_total", new AppendableMap<>()
!!!!! >             .appendAll(extraLabels));
!!!!! >         metrics.add(sslUnwrapTaskTimeMillisTotal);
!!!!! > 
!!!!! >         threadNumberCurrent = new Gauge("thread_number_current", new AppendableMap<>()
!!!!! >             .appendAll(extraLabels));
!!!!! >         metrics.add(threadNumberCurrent);
!!!!! > 
!!!!! 123a158,184
!!!!! >     public void sslUnwrapTask(long costMillis) {
!!!!! >         sslUnwrapTaskCount.incr(1);
!!!!! >         sslUnwrapTaskTimeMillisTotal.incr(costMillis);
!!!!! >     }
!!!!! > 
!!!!! >     public Runnable wrapThread(Runnable r) {
!!!!! >         return () -> {
!!!!! >             VProxyThread vt = (VProxyThread) Thread.currentThread();
!!!!! >             runningThreads.add(vt);
!!!!! >             threadNumberCurrent.incr(1);
!!!!! >             try {
!!!!! >                 r.run();
!!!!! >             } finally {
!!!!! >                 threadNumberCurrent.decr(1);
!!!!! >                 runningThreads.remove(vt);
!!!!! >             }
!!!!! >         };
!!!!! >     }
!!!!! > 
!!!!! >     public void registerSelectorEventLoop(SelectorEventLoop loop) {
!!!!! >         runningLoops.add(loop);
!!!!! >     }
!!!!! > 
!!!!! >     public void deregisterSelectorEventLoop(SelectorEventLoop loop) {
!!!!! >         runningLoops.remove(loop);
!!!!! >     }
!!!!! > 
!!!!! 126a188,387
!!!!! > 
!!!!! >     public String getStackTraces() {
!!!!! >         var threads = new HashSet<>(runningThreads);
!!!!! >         StringBuilder sb = new StringBuilder();
!!!!! >         for (var vt : threads) {
!!!!! >             var name = new SimpleString(vt.thread().getName()).stringify();
!!!!! >             var tid = vt.thread().getId();
!!!!! >             var state = vt.thread().getState().name();
!!!!! >             sb.append(name).append(" ").append("tid=").append(tid).append("\n")
!!!!! >                 .append("   java.lang.Thread.State: ").append(state).append("\n");
!!!!! >             var stacks = vt.thread().getStackTrace();
!!!!! >             if (stacks.length != 0) {
!!!!! >                 for (var s : stacks) {
!!!!! >                     sb.append("\tat ").append(s).append("\n");
!!!!! >                 }
!!!!! >             }
!!!!! >             sb.append("\n");
!!!!! >         }
!!!!! >         return sb.toString();
!!!!! >     }
!!!!! > 
!!!!! >     public void getOpenFDs(Consumer<String> cb) {
!!!!! >         var loops = new HashSet<>(runningLoops);
!!!!! >         TableBuilder table = new TableBuilder();
!!!!! >         var tr = table.tr();
!!!!! >         tr.td("TID").td("WATCHED").td("FIRED").td("FD").td("VIRTUAL").td("HYBRID").td("LOCAL").td("REMOTE").td("REAL").td("REAL-VIRTUAL").td("REAL-LOCAL").td("REAL-REMOTE");
!!!!! >         var ite = loops.iterator();
!!!!! >         var callback = new RunOnLoopCallback<>(new Callback<String, NoException>() {
!!!!! >             @Override
!!!!! >             protected void onSucceeded(String value) {
!!!!! >                 cb.accept(value);
!!!!! >             }
!!!!! > 
!!!!! >             @Override
!!!!! >             protected void onFailed(NoException err) {
!!!!! >             }
!!!!! >         });
!!!!! >         recursiveGetOpenFds(ite, table, callback::succeeded);
!!!!! >     }
!!!!! > 
!!!!! >     private void recursiveGetOpenFds(Iterator<SelectorEventLoop> ite, TableBuilder table, Consumer<String> cb) {
!!!!! >         if (!ite.hasNext()) {
!!!!! >             cb.accept(table.toString());
!!!!! >             return;
!!!!! >         }
!!!!! >         var loop = ite.next();
!!!!! >         var thread = loop.getRunningThread();
!!!!! >         if (thread == null) { // not running
!!!!! >             recursiveGetOpenFds(ite, table, cb);
!!!!! >             return;
!!!!! >         }
!!!!! >         var set = new HashSet<FDInspection>();
!!!!! >         var currentLoop = SelectorEventLoop.current();
!!!!! >         loop.copyChannels(set, () -> currentLoop.runOnLoop(() -> {
!!!!! >             for (var f : set) {
!!!!! >                 var tr = table.tr();
!!!!! >                 tr.td(thread.getId() + "");
!!!!! >                 var fd = f.fd;
!!!!! >                 tr.td(f.watchedEvents == null ? "-" : f.watchedEvents.toString());
!!!!! >                 tr.td(f.firedEvents == null ? "-" : f.firedEvents.toString());
!!!!! >                 appendFDType(tr, fd);
!!!!! >                 tr.td(fd instanceof VirtualFD ? "Y" : "N");
!!!!! >                 tr.td(!(fd instanceof VirtualFD) && fd.real() instanceof VirtualFD ? "Y" : "N");
!!!!! >                 appendLocalRemote(tr, fd);
!!!!! >                 FD real = null;
!!!!! >                 try {
!!!!! >                     real = fd.real();
!!!!! >                 } catch (Throwable ignore) {
!!!!! >                 }
!!!!! >                 if (real != null && real != fd) {
!!!!! >                     appendFDType(tr, real);
!!!!! >                     tr.td(real instanceof VirtualFD ? "Y" : "N");
!!!!! >                     appendLocalRemote(tr, real);
!!!!! >                 } else {
!!!!! >                     tr.td("-").td("-").td("-").td("-");
!!!!! >                 }
!!!!! >             }
!!!!! >             recursiveGetOpenFds(ite, table, cb);
!!!!! >         }));
!!!!! >     }
!!!!! > 
!!!!! >     private void appendFDType(TR tr, FD fd) {
!!!!! >         if (fd instanceof PosixFD) {
!!!!! >             tr.td(fd.getClass().getSimpleName() + ":" + ((PosixFD) fd).getFD());
!!!!! >         } else {
!!!!! >             tr.td(fd.getClass().getSimpleName());
!!!!! >         }
!!!!! >     }
!!!!! > 
!!!!! >     private void appendAddress(TR tr, SockAddr sockAddr) {
!!!!! >         String s = sockAddr.toString();
!!!!! >         if (s.startsWith("/")) {
!!!!! >             s = s.substring(1);
!!!!! >         }
!!!!! >         tr.td(s);
!!!!! >     }
!!!!! > 
!!!!! >     @SuppressWarnings("rawtypes")
!!!!! >     private void appendLocalRemote(TR tr, FD fd) {
!!!!! >         if (fd instanceof NetworkFD) {
!!!!! >             SockAddr local = null;
!!!!! >             SockAddr remote = null;
!!!!! >             try {
!!!!! >                 local = ((NetworkFD) fd).getLocalAddress();
!!!!! >             } catch (Throwable ignore) {
!!!!! >             }
!!!!! >             try {
!!!!! >                 remote = ((NetworkFD) fd).getRemoteAddress();
!!!!! >             } catch (Throwable ignore) {
!!!!! >             }
!!!!! >             if (local == null) {
!!!!! >                 tr.td("-");
!!!!! >             } else {
!!!!! >                 appendAddress(tr, local);
!!!!! >             }
!!!!! >             if (remote == null) {
!!!!! >                 tr.td("-");
!!!!! >             } else {
!!!!! >                 appendAddress(tr, remote);
!!!!! >             }
!!!!! >         } else if (fd instanceof ServerSocketFD) {
!!!!! >             SockAddr local = null;
!!!!! >             try {
!!!!! >                 local = ((ServerSocketFD) fd).getLocalAddress();
!!!!! >             } catch (Throwable ignore) {
!!!!! >             }
!!!!! >             if (local != null) {
!!!!! >                 appendAddress(tr, local);
!!!!! >             }
!!!!! >         } else {
!!!!! >             tr.td("-").td("-");
!!!!! >         }
!!!!! >     }
!!!!! > 
!!!!! >     public void getOpenFDsTree(Consumer<String> cb) {
!!!!! >         var loops = new HashSet<>(runningLoops);
!!!!! >         TreeBuilder tree = new TreeBuilder();
!!!!! >         var ite = loops.iterator();
!!!!! >         var callback = new RunOnLoopCallback<>(new Callback<String, NoException>() {
!!!!! >             @Override
!!!!! >             protected void onSucceeded(String value) {
!!!!! >                 cb.accept(value);
!!!!! >             }
!!!!! > 
!!!!! >             @Override
!!!!! >             protected void onFailed(NoException err) {
!!!!! >             }
!!!!! >         });
!!!!! >         recursiveGetOpenFdsTree(ite, tree, callback::succeeded);
!!!!! >     }
!!!!! > 
!!!!! >     private void recursiveGetOpenFdsTree(Iterator<SelectorEventLoop> ite, TreeBuilder tree, Consumer<String> cb) {
!!!!! >         if (!ite.hasNext()) {
!!!!! >             cb.accept(tree.toString());
!!!!! >             return;
!!!!! >         }
!!!!! >         var loop = ite.next();
!!!!! >         var thread = loop.getRunningThread();
!!!!! >         if (thread == null) { // not running
!!!!! >             recursiveGetOpenFdsTree(ite, tree, cb);
!!!!! >             return;
!!!!! >         }
!!!!! >         var set = new HashSet<FDInspection>();
!!!!! >         var currentLoop = SelectorEventLoop.current();
!!!!! >         loop.copyChannels(set, () -> currentLoop.runOnLoop(() -> {
!!!!! >             var branch = tree.branch(thread.getName() + "#" + thread.getId());
!!!!! >             getOpenFDsTree(branch, set);
!!!!! >             recursiveGetOpenFdsTree(ite, tree, cb);
!!!!! >         }));
!!!!! >     }
!!!!! > 
!!!!! >     private void getOpenFDsTree(TreeBuilder.BranchBuilder branch, HashSet<FDInspection> set) {
!!!!! >         var root = new HashSet<FDInspection>();
!!!!! >         for (var fd : set) {
!!!!! >             boolean isSub = false;
!!!!! >             for (var fd2 : set) {
!!!!! >                 if (fd2.fd.contains(fd.fd)) {
!!!!! >                     isSub = true;
!!!!! >                     break;
!!!!! >                 }
!!!!! >             }
!!!!! >             if (!isSub) {
!!!!! >                 root.add(fd);
!!!!! >             }
!!!!! >         }
!!!!! >         for (var fd : root) {
!!!!! >             var br = branch.branch(fd.toString());
!!!!! >             getOpenFDsTree(br, fd, set);
!!!!! >         }
!!!!! >     }
!!!!! > 
!!!!! >     private void getOpenFDsTree(TreeBuilder.BranchBuilder br, FDInspection fd, HashSet<FDInspection> set) {
!!!!! >         var subSet = new HashSet<FDInspection>();
!!!!! >         for (FDInspection fd2 : set) {
!!!!! >             if (fd.fd.contains(fd2.fd)) {
!!!!! >                 subSet.add(fd2);
!!!!! >             }
!!!!! >         }
!!!!! >         getOpenFDsTree(br, subSet);
!!!!! >     }
!!!!! diff return code 1 !!!!!

!!!!! diff /java/io/vproxy/base/Config.java !!!!!
!!!!! 2a3,4
!!!!! > import io.vproxy.base.util.Logger;
!!!!! > import io.vproxy.base.util.OS;
!!!!! 3a6
!!!!! > import io.vproxy.base.util.log.ProbeType;
!!!!! 5a9,13
!!!!! > import java.util.Arrays;
!!!!! > import java.util.HashSet;
!!!!! > import java.util.Set;
!!!!! > import java.util.function.Predicate;
!!!!! > import java.util.stream.Collectors;
!!!!! 7a16,60
!!!!! >     // we only read/assign this value, not increase
!!!!! >     public static long currentTimestamp = System.currentTimeMillis();
!!!!! >     // initially we use the java impl because the FDProvider is not initiated yet
!!!!! > 
!!!!! >     // the default udpTimeout is the same as LVS
!!!!! >     // set it smaller if your environment have a smaller udp ttl
!!!!! >     public static final int udpTimeout = 300 * 1000;
!!!!! > 
!!!!! >     // the default tcpTimeout is the same as LVS
!!!!! >     // set it smaller if your environment have a smaller tcp session ttl
!!!!! >     public static final int tcpTimeout = 15 * 60_000;
!!!!! > 
!!!!! >     // the maximum expected size of a udp packet
!!!!! >     public static final int udpMtu = 65536;
!!!!! > 
!!!!! >     // the recommended min payload length
!!!!! >     // also, see Processor.PROXY_ZERO_COPY_THRESHOLD
!!!!! >     public static final int recommendedMinPayloadLength = 1200;
!!!!! >     // usually mtu is set to 1500, but some routers might set the value to 1480, 1440 or lower
!!!!! >     // we use 1400 here
!!!!! > 
!!!!! >     // whether the loading of configuration is disabled
!!!!! >     // true = disabled, false = enabled
!!!!! >     public static boolean configLoadingDisabled = false;
!!!!! > 
!!!!! >     // whether the saving of configuration is disabled
!!!!! >     // true = disabled, false = enabled
!!!!! >     public static boolean configSavingDisabled = false;
!!!!! > 
!!!!! >     // whether modifying configuration is disabled
!!!!! >     // true = disabled, false = enabled
!!!!! >     public static boolean configModifyDisabled = false;
!!!!! > 
!!!!! >     // whether the program is going to stop
!!!!! >     // true = will stop, false = normal state
!!!!! >     public static boolean willStop = false;
!!!!! > 
!!!!! >     // whether to check before actual binding a port
!!!!! >     // true = will check, false = will not check
!!!!! >     public static boolean checkBind = true;
!!!!! > 
!!!!! >     // the location of auto saved file path
!!!!! >     // null for the default path
!!!!! >     public static String autoSaveFilePath = null;
!!!!! > 
!!!!! 40a94,174
!!!!! > 
!!!!! >     // -Deploy=xxx
!!!!! >     public static final String appClass;
!!!!! > 
!!!!! >     // -Dprobe=...
!!!!! >     public static final Set<ProbeType> probe;
!!!!! > 
!!!!! >     private static int supportReusePortLB = 0;
!!!!! >     // do not initialize the field statically
!!!!! >     // graalvm native image might initialize the field and won't be changed at runtime
!!!!! > 
!!!!! >     // this field is used as the domain to be resolved for health checking for dns
!!!!! >     // -DomainWhichShouldResolve
!!!!! >     public static final String domainWhichShouldResolve;
!!!!! > 
!!!!! >     // the config file path for mirror
!!!!! >     // -DmirrorConf=...
!!!!! >     public static final String mirrorConfigPath;
!!!!! > 
!!!!! >     // the nics for dhcp to use
!!!!! >     // -DhcpGetDnsListNics=all or eth0,eth1,... (split with ',')
!!!!! >     public static final boolean dhcpGetDnsListEnabled;
!!!!! >     public static final Predicate<String> dhcpGetDnsListNics;
!!!!! > 
!!!!! >     static {
!!!!! >         appClass = Utils.getSystemProperty("deploy");
!!!!! >         String probeConf = Utils.getSystemProperty("probe", "");
!!!!! >         if (probeConf.equals("all")) {
!!!!! >             probe = Set.of(ProbeType.VIRTUAL_FD_EVENT, ProbeType.STREAMED_ARQ_UDP_EVENT, ProbeType.STREAMED_ARQ_UDP_RECORD);
!!!!! >         } else {
!!!!! >             var names = Arrays.stream(probeConf.split(",")).map(String::trim).filter(s -> !s.isEmpty()).collect(Collectors.toSet());
!!!!! >             var res = new HashSet<ProbeType>();
!!!!! >             for (var n : names) {
!!!!! >                 var t = ProbeType.of(n);
!!!!! >                 if (t == null) {
!!!!! >                     System.out.println("unknown probe type: " + n);
!!!!! >                 } else {
!!!!! >                     res.add(t);
!!!!! >                 }
!!!!! >             }
!!!!! >             probe = res;
!!!!! >         }
!!!!! >         domainWhichShouldResolve = Utils.getSystemProperty("domain_which_should_resolve", "127.0.0.1.special.vproxy.io");
!!!!! >         mirrorConfigPath = Utils.getSystemProperty("mirror_conf", "");
!!!!! > 
!!!!! >         String dhcpGetDnsListNicsString = Utils.getSystemProperty("dhcp_get_dns_list_nics", "");
!!!!! >         if (dhcpGetDnsListNicsString.isBlank()) {
!!!!! >             dhcpGetDnsListEnabled = false;
!!!!! >             dhcpGetDnsListNics = n -> false;
!!!!! >         } else if (dhcpGetDnsListNicsString.trim().equals("all")) {
!!!!! >             dhcpGetDnsListEnabled = true;
!!!!! >             dhcpGetDnsListNics = n -> true;
!!!!! >         } else {
!!!!! >             var set = Arrays.stream(dhcpGetDnsListNicsString.split(",")).map(String::trim).filter(n -> !n.isEmpty()).collect(Collectors.toSet());
!!!!! >             dhcpGetDnsListEnabled = true;
!!!!! >             dhcpGetDnsListNics = set::contains;
!!!!! >         }
!!!!! >     }
!!!!! > 
!!!!! >     public static boolean supportReusePortLB() {
!!!!! >         if (supportReusePortLB == -1) {
!!!!! >             return false;
!!!!! >         }
!!!!! >         if (supportReusePortLB == 1) {
!!!!! >             return true;
!!!!! >         }
!!!!! >         String os = OS.name();
!!!!! >         String version = OS.version();
!!!!! >         if (OS.isLinux()) {
!!!!! >             int major = OS.major();
!!!!! >             int minor = OS.minor();
!!!!! >             if (major > 3 || (major == 3 && minor >= 9)) {
!!!!! >                 Logger.alert("reuseport load balancing across sockets supported on " + os + " " + major + "." + minor);
!!!!! >                 supportReusePortLB = 1;
!!!!! >                 return true;
!!!!! >             }
!!!!! >         }
!!!!! >         assert Logger.lowLevelDebug("reuseport load balancing NOT supported: " + os + " " + version);
!!!!! >         supportReusePortLB = -1;
!!!!! >         return false;
!!!!! >     }
!!!!! diff return code 1 !!!!!

##### files are the same: /java/io/vproxy/base/prometheus/GaugeF.java #####
##### files are the same: /java/io/vproxy/base/prometheus/Gauge.java #####
##### files are the same: /java/io/vproxy/base/prometheus/Metric.java #####
##### files are the same: /java/io/vproxy/base/prometheus/Counter.java #####
##### files are the same: /java/io/vproxy/base/prometheus/Metrics.java #####
##### files are the same: /java/io/vproxy/base/dns/dnsserverlistgetter/GetDnsServerListFromConfigFile.java #####
##### files are the same: /java/io/vproxy/base/dns/dnsserverlistgetter/GetDnsServerListDefault.java #####
!!!!! diff /java/io/vproxy/base/dns/DnsServerListGetter.java !!!!!
!!!!! 2a3
!!!!! > import io.vproxy.base.Config;
!!!!! 4a6
!!!!! > import io.vproxy.base.dns.dnsserverlistgetter.GetDnsServerListFromDhcp;
!!!!! 20,21c22,28
!!!!! <         return Arrays.asList(
!!!!! <             new GetDnsServerListFromConfigFile(), new GetDnsServerListDefault());
!!!!! ---
!!!!! >         if (Config.dhcpGetDnsListEnabled) {
!!!!! >             return Arrays.asList(
!!!!! >                 new GetDnsServerListFromDhcp(), new GetDnsServerListFromConfigFile(), new GetDnsServerListDefault());
!!!!! >         } else {
!!!!! >             return Arrays.asList(
!!!!! >                 new GetDnsServerListFromConfigFile(), new GetDnsServerListDefault());
!!!!! >         }
!!!!! 25,26c32,38
!!!!! <         return Collections.singletonList(
!!!!! <             new GetDnsServerListFromConfigFile());
!!!!! ---
!!!!! >         if (Config.dhcpGetDnsListEnabled) {
!!!!! >             return Arrays.asList(
!!!!! >                 new GetDnsServerListFromDhcp(), new GetDnsServerListFromConfigFile());
!!!!! >         } else {
!!!!! >             return Collections.singletonList(
!!!!! >                 new GetDnsServerListFromConfigFile());
!!!!! >         }
!!!!! diff return code 1 !!!!!

##### commons missing: /java/io/vproxy/xdp/BPFMap.java #####
##### commons missing: /java/io/vproxy/xdp/XDPSocket.java #####
##### commons missing: /java/io/vproxy/xdp/SharedUMem.java #####
##### commons missing: /java/io/vproxy/xdp/NativeXDP.java #####
##### commons missing: /java/io/vproxy/xdp/BPFMode.java #####
##### commons missing: /java/io/vproxy/xdp/UMem.java #####
##### commons missing: /java/io/vproxy/xdp/ChunkPrototypeObjectList.java #####
##### commons missing: /java/io/vproxy/xdp/Chunk.java #####
##### commons missing: /java/io/vproxy/xdp/BPFObject.java #####
##### commons missing: /java/io/vproxy/vfd/FDsWithTap.java #####
##### commons missing: /java/io/vproxy/vfd/FDsWithCoreAffinity.java #####
##### commons missing: /java/io/vproxy/vfd/posix/VSocketAddress.java #####
##### commons missing: /java/io/vproxy/vfd/posix/Posix.java #####
##### commons missing: /java/io/vproxy/vfd/posix/PosixNetworkFD.java #####
##### commons missing: /java/io/vproxy/vfd/posix/PosixDatagramFD.java #####
##### commons missing: /java/io/vproxy/vfd/posix/PosixServerSocketFD.java #####
##### commons missing: /java/io/vproxy/vfd/posix/PosixTapDatagramFD.java #####
##### commons missing: /java/io/vproxy/vfd/posix/SocketAddressIPv6.java #####
##### commons missing: /java/io/vproxy/vfd/posix/PosixSocketFD.java #####
##### commons missing: /java/io/vproxy/vfd/posix/GeneralPosix.java #####
##### commons missing: /java/io/vproxy/vfd/posix/Att.java #####
##### commons missing: /java/io/vproxy/vfd/posix/SocketAddressIPv4.java #####
##### commons missing: /java/io/vproxy/vfd/posix/FDInfo.java #####
##### commons missing: /java/io/vproxy/vfd/posix/UDPRecvResult.java #####
##### commons missing: /java/io/vproxy/vfd/posix/SocketAddressUDS.java #####
##### commons missing: /java/io/vproxy/vfd/posix/PosixInetNetworkFD.java #####
##### commons missing: /java/io/vproxy/vfd/posix/UnixDomainServerSocketFD.java #####
##### commons missing: /java/io/vproxy/vfd/posix/PosixFDs.java #####
##### commons missing: /java/io/vproxy/vfd/posix/FDInfoPrototypeObjectList.java #####
##### commons missing: /java/io/vproxy/vfd/posix/PosixFD.java #####
##### commons missing: /java/io/vproxy/vfd/posix/UnixDomainSocketFD.java #####
##### commons missing: /java/io/vproxy/vfd/posix/AESelector.java #####
##### commons missing: /java/io/vproxy/vfd/SockAddr.java #####
##### commons missing: /java/io/vproxy/vfd/VFDConfig.java #####
##### commons missing: /java/io/vproxy/vfd/UDSPath.java #####
##### commons missing: /java/io/vproxy/vfd/AbstractDatagramFD.java #####
##### commons missing: /java/io/vproxy/vfd/RegisterEntry.java #####
##### commons missing: /java/io/vproxy/vfd/NetworkFD.java #####
##### commons missing: /java/io/vproxy/vfd/FDsWithOpts.java #####
##### commons missing: /java/io/vproxy/vfd/EventSet.java #####
##### commons missing: /java/io/vproxy/vfd/SocketFD.java #####
##### commons missing: /java/io/vproxy/vfd/jdk/SocketChannelFD.java #####
##### commons missing: /java/io/vproxy/vfd/jdk/ChannelSelector.java #####
##### commons missing: /java/io/vproxy/vfd/jdk/ServerSocketChannelFD.java #####
##### commons missing: /java/io/vproxy/vfd/jdk/DatagramChannelFD.java #####
##### commons missing: /java/io/vproxy/vfd/jdk/ChannelFDs.java #####
##### commons missing: /java/io/vproxy/vfd/jdk/ChannelFD.java #####
##### commons missing: /java/io/vproxy/vfd/FDs.java #####
##### commons missing: /java/io/vproxy/vfd/TapInfo.java #####
##### commons missing: /java/io/vproxy/vfd/FDProvider.java #####
##### commons missing: /java/io/vproxy/vfd/ServerSocketFD.java #####
##### commons missing: /java/io/vproxy/vfd/Event.java #####
##### commons missing: /java/io/vproxy/vfd/TapDatagramFD.java #####
##### commons missing: /java/io/vproxy/vfd/DatagramFD.java #####
##### commons missing: /java/io/vproxy/vfd/FD.java #####
##### commons missing: /java/io/vproxy/vfd/abs/AbstractBaseFD.java #####
##### commons missing: /java/io/vproxy/vfd/SocketOptions.java #####
##### commons missing: /java/io/vproxy/vfd/TraceInvocationHandler.java #####
##### commons missing: /java/io/vproxy/vfd/NoSockAddr.java #####
##### commons missing: /java/io/vproxy/vfd/windows/WindowsTapDatagramFD.java #####
##### commons missing: /java/io/vproxy/vfd/windows/Windows.java #####
##### commons missing: /java/io/vproxy/vfd/windows/WindowsFDs.java #####
##### commons missing: /java/io/vproxy/vfd/windows/GeneralWindows.java #####
##### commons missing: /java/io/vproxy/vfd/SelectedEntry.java #####
##### commons missing: /java/io/vproxy/vfd/UnixDomainSocketAddress.java #####
##### commons missing: /java/io/vproxy/vfd/FDSelector.java #####
##### commons missing: /java/io/vproxy/msquic/MsQuicInitializer.java #####
##### commons missing: /java/io/vproxy/msquic/QuicBufferByteArray.java #####
##### commons missing: /java/io/vproxy/msquic/MsQuicModUpcallImpl.java #####
##### commons missing: /java/io/vproxy/vpacket/conntrack/udp/UdpListenEntry.java #####
##### commons missing: /java/io/vproxy/vpacket/conntrack/udp/UdpEntry.java #####
##### commons missing: /java/io/vproxy/vpacket/conntrack/udp/Datagram.java #####
##### commons missing: /java/io/vproxy/vpacket/conntrack/udp/UdpListenHandler.java #####
##### commons missing: /java/io/vproxy/vpacket/conntrack/udp/UdpNat.java #####
##### commons missing: /java/io/vproxy/vpacket/conntrack/udp/UdpUtils.java #####
##### commons missing: /java/io/vproxy/vpacket/conntrack/tcp/TcpUtils.java #####
##### commons missing: /java/io/vproxy/vpacket/conntrack/tcp/Segment.java #####
##### commons missing: /java/io/vproxy/vpacket/conntrack/tcp/TcpState.java #####
##### commons missing: /java/io/vproxy/vpacket/conntrack/tcp/ConnectionHandler.java #####
##### commons missing: /java/io/vproxy/vpacket/conntrack/tcp/ProxyProtocolHelper.java #####
##### commons missing: /java/io/vproxy/vpacket/conntrack/tcp/TcpTimeout.kt #####
##### commons missing: /java/io/vproxy/vpacket/conntrack/tcp/TcpEntry.java #####
##### commons missing: /java/io/vproxy/vpacket/conntrack/tcp/TcpNat.java #####
##### commons missing: /java/io/vproxy/vpacket/conntrack/tcp/TcpListenEntry.java #####
##### commons missing: /java/io/vproxy/vpacket/conntrack/tcp/TcpListenHandler.java #####
##### commons missing: /java/io/vproxy/vpacket/conntrack/Conntrack.java #####
##### commons missing: /java/io/vproxy/vpacket/VProxyEncryptedPacket.java #####
##### commons missing: /java/io/vproxy/vmirror/MirrorContext.java #####
##### commons missing: /java/io/vproxy/vmirror/MirrorData.java #####
##### commons missing: /java/io/vproxy/vmirror/Mirror.java #####
##### commons missing: /java/io/vproxy/vmirror/OriginConfig.java #####
##### commons missing: /java/io/vproxy/vmirror/MirrorConfig.java #####
##### commons missing: /java/io/vproxy/vmirror/MirrorDataFactory.java #####
##### commons missing: /java/io/vproxy/vmirror/FilterConfig.java #####
##### commons missing: /java/io/vproxy/fubuki/Fubuki.java #####
##### commons missing: /java/io/vproxy/fubuki/FubukiUpcall.java #####
##### commons missing: /java/io/vproxy/fubuki/FubukiCallback.java #####
##### commons missing: /java/io/vproxy/base/selector/Handler.java #####
##### commons missing: /java/io/vproxy/base/selector/SelectorEventLoop.java #####
##### commons missing: /java/io/vproxy/base/selector/HandlerContext.java #####
##### commons missing: /java/io/vproxy/base/selector/PeriodicEvent.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/AbstractDelegateServerSocketFD.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/streamed/StreamedServerSocketFD.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/streamed/MethodForStreamedFD.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/streamed/StreamedFDHandler.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/streamed/MethodForFDs.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/streamed/StreamedArqUDPServerFDs.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/streamed/MethodForImplementation.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/streamed/StreamedFD.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/streamed/StreamedArqUDPClientFDs.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/FDInspection.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/blocking/BlockingDatagramFD.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/udp/DatagramSocketFDWrapper.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/udp/UDPBasedFDs.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/udp/UDPFDs.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/udp/ServerDatagramFD.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/file/FilePath.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/file/FileFD.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/WritableAware.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/VirtualFD.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/h2streamed/H2StreamedFDHandler.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/h2streamed/H2StreamedServerFDs.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/h2streamed/H2StreamedClientFDs.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/AbstractDelegateSocketFD.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/ClosedSelectorExceptionWithInfo.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/AbstractDelegateFD.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/CancelledKeyExceptionWithInfo.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/AbstractBaseVirtualSocketFD.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/WrappedSelector.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/DelegatingTargetFD.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/arqudp/ArqUDPServerSocketFD.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/arqudp/ArqUDPHandler.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/arqudp/ArqUDPSocketFD.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/arqudp/ArqUDPBasedFDs.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/AbstractBaseVirtualServerSocketFD.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/DelegatingSourceFD.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/kcp/Kcp.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/kcp/mock/ByteBuf.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/kcp/mock/InternalLogger.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/kcp/mock/InternalLoggerFactory.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/kcp/mock/Recycler.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/kcp/mock/ByteBufAllocator.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/kcp/KCPServerSocketFD.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/kcp/KCPHandler.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/kcp/KcpOutput.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/kcp/KCPSocketFD.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/kcp/KCPFDs.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/quic/QuicDelegateSocketFD.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/quic/QuicListenerServerSocketFD.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/quic/QuicFDs.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/quic/QuicServerSocketFD.java #####
##### commons missing: /java/io/vproxy/base/selector/wrap/quic/QuicSocketFD.java #####
##### commons missing: /java/io/vproxy/base/selector/TimerEvent.java #####
##### commons missing: /java/io/vproxy/base/selector/package-info.java #####
##### commons missing: /java/io/vproxy/base/connection/NetFlowRecorder.java #####
##### commons missing: /java/io/vproxy/base/connection/ConnectableConnectionHandlerContext.java #####
##### commons missing: /java/io/vproxy/base/connection/util/SSLHandshakeDoneConnectableConnectionHandler.java #####
##### commons missing: /java/io/vproxy/base/connection/NetEventLoop.java #####
##### commons missing: /java/io/vproxy/base/connection/ConnectableConnectionHandler.java #####
##### commons missing: /java/io/vproxy/base/connection/ServerHandlerContext.java #####
##### commons missing: /java/io/vproxy/base/connection/ConnectionHandlerContext.java #####
##### commons missing: /java/io/vproxy/base/connection/ConnectionHandler.java #####
##### commons missing: /java/io/vproxy/base/connection/Connector.java #####
##### commons missing: /java/io/vproxy/base/connection/Connection.java #####
##### commons missing: /java/io/vproxy/base/connection/ConnectorProvider.java #####
##### commons missing: /java/io/vproxy/base/connection/ServerHandler.java #####
##### commons missing: /java/io/vproxy/base/connection/ConnCloseHandler.java #####
##### commons missing: /java/io/vproxy/base/connection/ConnectableConnection.java #####
##### commons missing: /java/io/vproxy/base/connection/ConnectionOpts.java #####
##### commons missing: /java/io/vproxy/base/connection/ServerSock.java #####
##### commons missing: /java/io/vproxy/base/util/ringbuffer/ssl/SSLContextHolder.java #####
##### commons missing: /java/io/vproxy/base/util/ringbuffer/ssl/SSL.java #####
##### commons missing: /java/io/vproxy/base/util/ringbuffer/ssl/SSLEngineBuilder.java #####
##### commons missing: /java/io/vproxy/base/util/ringbuffer/ssl/VSSLContext.java #####
##### commons missing: /java/io/vproxy/base/util/ringbuffer/EncryptIVInDataWrapRingBuffer.java #####
##### commons missing: /java/io/vproxy/base/util/ringbuffer/SSLWrapRingBuffer.java #####
##### commons missing: /java/io/vproxy/base/util/ringbuffer/DecryptIVInDataUnwrapRingBuffer.java #####
##### commons missing: /java/io/vproxy/base/util/ringbuffer/SimpleRingBufferReaderCommitter.java #####
##### commons missing: /java/io/vproxy/base/util/ringbuffer/SSLUnwrapRingBuffer.java #####
##### commons missing: /java/io/vproxy/base/util/ringbuffer/SSLUtils.java #####
##### commons missing: /java/io/vproxy/base/util/misc/WithUserData.java #####
##### commons missing: /java/io/vproxy/base/util/Annotations.java #####
##### commons missing: /java/io/vproxy/base/util/crypto/StreamingCFBCipher.java #####
##### commons missing: /java/io/vproxy/base/util/crypto/CryptoUtils.java #####
##### commons missing: /java/io/vproxy/base/util/crypto/Aes256Key.java #####
##### commons missing: /java/io/vproxy/base/util/crypto/BlockCipherKey.java #####
##### commons missing: /java/io/vproxy/base/util/file/FileWatcherHandler.java #####
##### commons missing: /java/io/vproxy/base/util/file/FileWatcher.java #####
##### commons missing: /java/io/vproxy/base/util/codec/AbstractParser.java #####
##### commons missing: /java/io/vproxy/base/util/codec/AbstractDecoder.java #####
##### commons missing: /java/io/vproxy/base/util/Timer.java #####
##### commons missing: /java/io/vproxy/base/util/kt/KT.java #####
##### commons missing: /java/io/vproxy/base/util/callback/RunOnLoopCallback.java #####
##### commons missing: /java/io/vproxy/base/util/AnnotationKeys.java #####
##### commons missing: /java/io/vproxy/base/util/thread/VProxyThreadJsonParserCacheHolder.java #####
##### commons missing: /java/io/vproxy/base/util/thread/VProxyThread.java #####
##### commons missing: /java/io/vproxy/base/util/thread/VProxyThreadImpl.java #####
##### commons missing: /java/io/vproxy/base/redis/entity/RESPString.java #####
##### commons missing: /java/io/vproxy/base/redis/entity/RESPError.java #####
##### commons missing: /java/io/vproxy/base/redis/entity/RESPBulkString.java #####
##### commons missing: /java/io/vproxy/base/redis/entity/RESPArray.java #####
##### commons missing: /java/io/vproxy/base/redis/entity/RESP.java #####
##### commons missing: /java/io/vproxy/base/redis/entity/RESPInline.java #####
##### commons missing: /java/io/vproxy/base/redis/entity/RESPInteger.java #####
##### commons missing: /java/io/vproxy/base/redis/entity/package-info.java #####
##### commons missing: /java/io/vproxy/base/redis/RESPParser.java #####
##### commons missing: /java/io/vproxy/base/redis/RESPProtocolHandler.java #####
##### commons missing: /java/io/vproxy/base/redis/RESPContext.java #####
##### commons missing: /java/io/vproxy/base/redis/RESPConfig.java #####
##### commons missing: /java/io/vproxy/base/redis/application/RESPApplicationContext.java #####
##### commons missing: /java/io/vproxy/base/redis/application/RESPApplication.java #####
##### commons missing: /java/io/vproxy/base/redis/application/RESPCommand.java #####
##### commons missing: /java/io/vproxy/base/redis/application/RESPApplicationConfig.java #####
##### commons missing: /java/io/vproxy/base/redis/application/RESPApplicationHandler.java #####
##### commons missing: /java/io/vproxy/base/redis/Serializer.java #####
##### commons missing: /java/io/vproxy/base/redis/RESPHandler.java #####
##### commons missing: /java/io/vproxy/base/redis/package-info.java #####
##### commons missing: /java/io/vproxy/base/processor/http1/HttpContext.java #####
##### commons missing: /java/io/vproxy/base/processor/http1/entity/Response.java #####
##### commons missing: /java/io/vproxy/base/processor/http1/entity/Chunk.java #####
##### commons missing: /java/io/vproxy/base/processor/http1/entity/Header.java #####
##### commons missing: /java/io/vproxy/base/processor/http1/entity/Request.java #####
##### commons missing: /java/io/vproxy/base/processor/http1/HttpProcessor.java #####
##### commons missing: /java/io/vproxy/base/processor/http1/HttpSubContext.java #####
##### commons missing: /java/io/vproxy/base/processor/http1/builder/HeaderBuilder.java #####
##### commons missing: /java/io/vproxy/base/processor/http1/builder/RequestBuilder.java #####
##### commons missing: /java/io/vproxy/base/processor/http1/builder/ResponseBuilder.java #####
##### commons missing: /java/io/vproxy/base/processor/http1/builder/ChunkBuilder.java #####
##### commons missing: /java/io/vproxy/base/processor/DummyConnectionDelegate.java #####
##### commons missing: /java/io/vproxy/base/processor/ProcessorRegistry.java #####
##### commons missing: /java/io/vproxy/base/processor/ProcessorProvider.java #####
##### commons missing: /java/io/vproxy/base/processor/common/CommonInt32FramedProcessor.java #####
##### commons missing: /java/io/vproxy/base/processor/Processor.java #####
##### commons missing: /java/io/vproxy/base/processor/DefaultProcessorRegistry.java #####
##### commons missing: /java/io/vproxy/base/processor/http/GeneralHttpContext.java #####
##### commons missing: /java/io/vproxy/base/processor/http/GeneralHttpSubContext.java #####
##### commons missing: /java/io/vproxy/base/processor/http/GeneralHttpProcessor.java #####
##### commons missing: /java/io/vproxy/base/processor/HeadPayloadProcessor.java #####
##### commons missing: /java/io/vproxy/base/processor/Hint.java #####
##### commons missing: /java/io/vproxy/base/processor/OOSubContext.java #####
##### commons missing: /java/io/vproxy/base/processor/OOContext.java #####
##### commons missing: /java/io/vproxy/base/processor/ConnectionDelegate.java #####
##### commons missing: /java/io/vproxy/base/processor/OOProcessor.java #####
##### commons missing: /java/io/vproxy/base/processor/dubbo/DubboProcessor.java #####
##### commons missing: /java/io/vproxy/base/processor/httpbin/hpack/SyncHeaderListener.java #####
##### commons missing: /java/io/vproxy/base/processor/httpbin/hpack/HPack.java #####
##### commons missing: /java/io/vproxy/base/processor/httpbin/entity/Setting.java #####
##### commons missing: /java/io/vproxy/base/processor/httpbin/entity/Header.java #####
##### commons missing: /java/io/vproxy/base/processor/httpbin/BinaryHttpSubContextCaster.java #####
##### commons missing: /java/io/vproxy/base/processor/httpbin/frame/WithPriority.java #####
##### commons missing: /java/io/vproxy/base/processor/httpbin/frame/PushPromiseFrame.java #####
##### commons missing: /java/io/vproxy/base/processor/httpbin/frame/CancelPushFrame.java #####
##### commons missing: /java/io/vproxy/base/processor/httpbin/frame/PingFrame.java #####
##### commons missing: /java/io/vproxy/base/processor/httpbin/frame/RstStreamFrame.java #####
##### commons missing: /java/io/vproxy/base/processor/httpbin/frame/WindowUpdateFrame.java #####
##### commons missing: /java/io/vproxy/base/processor/httpbin/frame/GoAwayFrame.java #####
##### commons missing: /java/io/vproxy/base/processor/httpbin/frame/DataFrame.java #####
##### commons missing: /java/io/vproxy/base/processor/httpbin/frame/SettingsFrame.java #####
##### commons missing: /java/io/vproxy/base/processor/httpbin/frame/HeadersFrame.java #####
##### commons missing: /java/io/vproxy/base/processor/httpbin/frame/WithHeaders.java #####
##### commons missing: /java/io/vproxy/base/processor/httpbin/frame/ContinuationFrame.java #####
##### commons missing: /java/io/vproxy/base/processor/httpbin/frame/MaxPushIdFrame.java #####
##### commons missing: /java/io/vproxy/base/processor/httpbin/frame/PriorityFrame.java #####
##### commons missing: /java/io/vproxy/base/processor/httpbin/frame/Preface.java #####
##### commons missing: /java/io/vproxy/base/processor/httpbin/BinaryHttpSubContext.java #####
##### commons missing: /java/io/vproxy/base/processor/httpbin/Stream.java #####
##### commons missing: /java/io/vproxy/base/processor/httpbin/StreamSession.java #####
##### commons missing: /java/io/vproxy/base/processor/httpbin/StreamHolder.java #####
##### commons missing: /java/io/vproxy/base/processor/httpbin/HttpFrame.java #####
##### commons missing: /java/io/vproxy/base/processor/httpbin/HttpFrameType.java #####
##### commons missing: /java/io/vproxy/base/processor/httpbin/BinaryHttpContext.java #####
##### commons missing: /java/io/vproxy/base/processor/httpbin/BinaryHttpProcessor.java #####
##### commons missing: /java/io/vproxy/base/processor/httpbin/HttpVersion.java #####
##### commons missing: /java/io/vproxy/base/processor/ExceptionWithoutStackTrace.java #####
##### commons missing: /java/io/vproxy/base/component/elgroup/dummy/PrototypeDelegateEventLoopGroup.java #####
##### commons missing: /java/io/vproxy/base/component/elgroup/dummy/IEventLoopGroup.java #####
##### commons missing: /java/io/vproxy/base/component/elgroup/dummy/DelegateEventLoopGroup.java #####
##### commons missing: /java/io/vproxy/base/component/elgroup/EventLoopWrapper.java #####
##### commons missing: /java/io/vproxy/base/component/elgroup/EventLoopAttach.java #####
##### commons missing: /java/io/vproxy/base/component/elgroup/EventLoopGroupAttach.java #####
##### commons missing: /java/io/vproxy/base/component/elgroup/EventLoopGroup.java #####
##### commons missing: /java/io/vproxy/base/component/svrgroup/ServerListener.java #####
##### commons missing: /java/io/vproxy/base/component/svrgroup/Method.java #####
##### commons missing: /java/io/vproxy/base/component/svrgroup/ServerGroup.java #####
##### commons missing: /java/io/vproxy/base/component/svrgroup/SvrHandleConnector.java #####
##### commons missing: /java/io/vproxy/base/component/check/ConnectResult.java #####
##### commons missing: /java/io/vproxy/base/component/check/CheckProtocol.java #####
##### commons missing: /java/io/vproxy/base/component/check/HealthCheckHandler.java #####
##### commons missing: /java/io/vproxy/base/component/check/HealthCheckClient.java #####
##### commons missing: /java/io/vproxy/base/component/check/AnnotatedHcConfig.java #####
##### commons missing: /java/io/vproxy/base/component/check/ConnectClient.java #####
##### commons missing: /java/io/vproxy/base/component/check/HealthCheckConfig.java #####
##### commons missing: /java/io/vproxy/base/protocol/ProtocolServerHandler.java #####
##### commons missing: /java/io/vproxy/base/protocol/ProtocolServerConfig.java #####
##### commons missing: /java/io/vproxy/base/protocol/ProtocolConnectionHandler.java #####
##### commons missing: /java/io/vproxy/base/protocol/ProtocolHandler.java #####
##### commons missing: /java/io/vproxy/base/protocol/SubProtocolHandlerContext.java #####
##### commons missing: /java/io/vproxy/base/protocol/ProtocolHandlerContext.java #####
##### commons missing: /java/io/vproxy/base/GlobalEvents.java #####
##### commons missing: /java/io/vproxy/base/http/Http2Decoder.java #####
##### commons missing: /java/io/vproxy/base/http/HttpReqParser.java #####
##### commons missing: /java/io/vproxy/base/http/HttpContext.java #####
##### commons missing: /java/io/vproxy/base/http/HttpProtocolHandler.java #####
##### commons missing: /java/io/vproxy/base/http/HttpRespParser.java #####
##### commons missing: /java/io/vproxy/base/http/connect/HttpConnectContext.java #####
##### commons missing: /java/io/vproxy/base/http/connect/HttpConnectProtocolHandler.java #####
##### commons missing: /java/io/vproxy/base/dhcp/DHCPClientHelper.java #####
##### commons missing: /java/io/vproxy/base/socks/AddressType.java #####
##### commons missing: /java/io/vproxy/base/socks/Socks5ClientHandshake.java #####
##### commons missing: /java/io/vproxy/base/dns/dnsserverlistgetter/GetDnsServerListFromDhcp.java #####
##### commons missing: /java/io/vproxy/base/dns/Resolver.java #####
##### commons missing: /java/io/vproxy/base/dns/ResolveListener.java #####
##### commons missing: /java/io/vproxy/base/dns/VResolver.java #####
##### commons missing: /java/io/vproxy/base/dns/ServerGroupDNSClient.java #####
##### commons missing: /java/io/vproxy/base/dns/Cache.java #####
##### commons missing: /java/io/vproxy/base/dns/AbstractResolver.java #####
##### commons missing: /java/io/vproxy/base/dns/DNSClient.java #####
